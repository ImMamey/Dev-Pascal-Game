Program ProyectoHalconMilenario;
uses
 crt;
 type
  arreglo=array[1..30,1..30]of string;
 var
 Mapa:arreglo;
 ContadorDeLineas,Filas,Columnas,NumEstrellas:integer;
 vero:boolean;
Procedure Preparacion;
var

BEGIN
END;

{=========================INTRODUCCION===============================}
Procedure Introduccion;
var
 cont:integer;
 Ass:string;
BEGIN
cont:=0; Ass:=('     Universidad Catolica Andres Bello    ');
while (cont<>6) do begin
{} Ass:=' '+Ass; Gotoxy(60,31);writeln(Ass); delay(100); cont:=cont+1;
end;
 delay(750); Clrscr;
cont:=0; Ass:=('    Practicas de Algoritmos y programacion I    ');
while (cont<>6) do begin
 {}Ass:=' '+Ass; Gotoxy(60,31);writeln(Ass); delay(100); cont:=cont+1;
end;
 Delay(750); Clrscr;

Gotoxy(60,31); Writeln('Bajo el sesarrollo, y supervision de: '); Delay(1000); Clrscr;

TextColor(Red);
Gotoxy(60,31);writeln('      $$$$$$$$$$$$$$$    ');
Gotoxy(60,32);writeln('      $$$$$$$$$$$$$$$$   ');
Gotoxy(60,33);writeln('                  $$$$   ');
Gotoxy(60,34);writeln('                  $$$$   ');
Gotoxy(60,35);writeln('      $$$$$$$$$$$$$$$    ');
Gotoxy(60,36);writeln('      $$$$$$$$$$$$$$$    ');
Gotoxy(60,37);writeln('                  $$$$   ');
Gotoxy(60,38);writeln('                  $$$$   ');
Gotoxy(60,39);writeln('      $$$$$$$$$$$$$$$$   ');
Gotoxy(60,40);writeln('      $$$$$$$$$$$$$$$    ');
          Textcolor(blue);Delay(150); ClrScr;
Gotoxy(60,31);writeln('       $$$$$$$$$$$$$     ');
Gotoxy(60,32);writeln('      $$$$$$$$$$$$$$$    ');
Gotoxy(60,33);writeln('      $$        $$$$     ');
Gotoxy(60,34);writeln('               $$$$      ');
Gotoxy(60,35);writeln('             $$$$        ');
Gotoxy(60,36);writeln('            $$$$         ');
Gotoxy(60,37);writeln('         $$$$            ');
Gotoxy(60,38);writeln('       $$$$              ');
Gotoxy(60,39);writeln('      $$$$$$$$$$$$$$     ');
Gotoxy(60,40);writeln('      $$$$$$$$$$$$$$     ');
 TextColor(Green);Delay(150); ClrScr;
Gotoxy(60,31);writeln('          $$$$$$          ');
Gotoxy(60,32);writeln('         $$$$$$$          ');
Gotoxy(60,33);writeln('        $$$$$$$$          ');
Gotoxy(60,34);writeln('       $$$$ $$$$          ');
Gotoxy(60,35);writeln('            $$$$          ');
Gotoxy(60,36);writeln('            $$$$          ');
Gotoxy(60,37);writeln('            $$$$          ');
Gotoxy(60,38);writeln('            $$$$          ');
Gotoxy(60,39);writeln('            $$$$          ');
Gotoxy(60,40);writeln('            $$$$          ');
Delay(150); ClrScr;

TextColor(red);    
Gotoxy(60,21);write('$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$    ');
Gotoxy(60,22);write('$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$    ');
Gotoxy(60,23);write('$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$    ');
Gotoxy(60,24);write('$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$    ');
Gotoxy(102,25);write('$$$$$$$$$$$    ');
Gotoxy(102,26);write('$$$$$$$$$$$    ');
Gotoxy(102,27);write('$$$$$$$$$$$    ');
Gotoxy(102,28);write('$$$$$$$$$$$    ');
Gotoxy(102,29);write('$$$$$$$$$$$    ');
Gotoxy(102,30);write('$$$$$$$$$$$    ');
Gotoxy(102,31);write('$$$$$$$$$$$    ');
Gotoxy(102,32);write('$$$$$$$$$$$    ');
Gotoxy(102,33);write('$$$$$$$$$$$    ');
Gotoxy(60,34);write('$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$    ');
Gotoxy(60,35);write('$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$    ');
Gotoxy(60,36);write('$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$    ');
Gotoxy(60,37);write('$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$    ');
Gotoxy(102,38);write('$$$$$$$$$$$    ');
Gotoxy(102,39);write('$$$$$$$$$$$    ');
Gotoxy(102,40);write('$$$$$$$$$$$    ');
Gotoxy(102,41);write('$$$$$$$$$$$    ');
Gotoxy(102,42);write('$$$$$$$$$$$    ');
Gotoxy(102,43);write('$$$$$$$$$$$    ');
Gotoxy(102,44);write('$$$$$$$$$$$    ');
Gotoxy(102,45);write('$$$$$$$$$$$    ');
Gotoxy(102,46);write('$$$$$$$$$$$    ');
Gotoxy(60,47);write('$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$    ');
Gotoxy(60,48);write('$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$     ');
Gotoxy(60,49);write('$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$    ');
Gotoxy(60,50);write('$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$    ');
        TextColor(Blue);
Gotoxy(82,29);write('$$$$$$$$$$$$$$$$$$$$$$$$$$$$$     ');
Gotoxy(80,30);write('$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$    ');
Gotoxy(78,31);write('$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$    ');
Gotoxy(78,32);write('$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$     ');
Gotoxy(78,33);write('$$$$$$$$$$           $$$$$$$$$$       ');
Gotoxy(97,34);write('$$$$$$$$$$          ');
Gotoxy(95,35);write('$$$$$$$$$$            ');
Gotoxy(92,36);write('$$$$$$$$$$               ');
Gotoxy(90,37);write('$$$$$$$$$$                 ');
Gotoxy(88,38);write('$$$$$$$$$$                   ');
Gotoxy(85,39);write('$$$$$$$$$$                      ');
Gotoxy(83,40);write('$$$$$$$$$$                        ');
Gotoxy(81,41);write('$$$$$$$$$$$                       ');
Gotoxy(80,42);write('$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$  ');
Gotoxy(79,43);write('$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$    ');
Gotoxy(79,44);write('$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$    ');
Gotoxy(79,45);write('$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$    ');
       TextColor(green);
Gotoxy(99,32);write('$$$$$$$$$$$$    ');
Gotoxy(98,33);write('$$$$$$$$$$$$$     ');
Gotoxy(97,34);write('$$$$$$$$$$$$$$      ');
Gotoxy(96,35);write('$$$$$$$ $$$$$$$      ');
Gotoxy(95,36);write('$$$$$$$  $$$$$$$      ');
Gotoxy(104,37);write('$$$$$$$      ');
Gotoxy(104,38);write('$$$$$$$      ');
Gotoxy(104,39);write('$$$$$$$      ');
Gotoxy(104,40);write('$$$$$$$       ');
Gotoxy(104,41);write('$$$$$$$     ');
         textcolor(white);
Gotoxy(58,52);writeln(' $$$$$$$       $$$$       $$$$   $$$$  $$$$$$$$$  $$$$$$$$$ ');
Gotoxy(58,53);writeln('$$$    $$     $$$$$$      $$$ $ $ $$$  $$$        $$$       ');
Gotoxy(58,54);writeln('$$$          $$$  $$$     $$$  $  $$$  $$$ $$$$$  $$$       ');
Gotoxy(58,55);writeln('$$$  $$$$$  $$$    $$$    $$$     $$$  $$$ $$$$$  $$$$$$$$$ ');
Gotoxy(58,56);writeln('$$$   $$$  $$$$$$$$$$$$   $$$     $$$  $$$              $$$ ');
Gotoxy(58,57);writeln(' $$$$$$$  $$$       $$$$  $$$     $$$  $$$$$$$$$  $$$$$$$$$ ');
           Delay(2000);clrscr;

 Gotoxy(60,31); Writeln('Presenta: '); Delay(1000); Clrscr;

writeln('$$$$  $$$       $$$$  $$$       $$$  $$$$$$$$$   $$$$$$$       $$$$       $$$$$$$   $$$$$$$$  $$$$$$$$$  $$$$  $$$');
Writeln('$$$$$ $$$      $$$$$$  $$$     $$$   $$$        $$$    $$     $$$$$$     $$$$$$$$$  $$$$$$$$  $$$$$$$$$  $$$$$ $$$');
Writeln('$$$$$ $$$     $$$  $$$  $$$   $$$    $$$ $$$$$  $$$          $$$  $$$    $$$           $$     $$     $$  $$$$$ $$$');
Writeln('$$ $$$$$$    $$$    $$$  $$$ $$$     $$$ $$$$$  $$$  $$$$$  $$$    $$$   $$$           $$     $$     $$  $$ $$$$$$');
Writeln('$$  $$$$$   $$$$$$$$$$$$  $$$$$      $$$        $$$   $$$  $$$$$$$$$$$$  $$$$$$$$$  $$$$$$$$  $$$$$$$$$  $$  $$$$$');
Writeln('$$   $$$$  $$$        $$$  $$$       $$$$$$$$$   $$$$$$$  $$$        $$$  $$$$$$$   $$$$$$$$  $$$$$$$$$  $$   $$$$');
Writeln;
WRITEln;
writeln;
Writeln('         $$$$$$$$$  $$$$$$$$$  $$$$$$$$$$ $$$$$$$$$  $$$            $$$$      $$$$$$$$$   ');
Writeln('         $$$        $$$         $$$$$$$$  $$$        $$$           $$$$$$     $$$    $$$  ');
Writeln('         $$$ $$$$$  $$$            $$     $$$ $$$$$  $$$          $$$  $$$    $$$    $$$  ');
Writeln('         $$$ $$$$$  $$$$$$$$$      $$     $$$ $$$$$  $$$         $$$    $$$   $$$$$$$$$   ');
Writeln('         $$$              $$$      $$     $$$        $$$$$$$$$  $$$$$$$$$$$$  $$$   $$$   ');
Writeln('         $$$$$$$$$  $$$$$$$$$      $$     $$$$$$$$$  $$$$$$$$$ $$$        $$$ $$$    $$$  ');


Delay(2500);

end;
{======================================SECCION DE MONTAR EL ARCHIVO POR PRIMERA VEZ=============================================================}

Procedure GenerarMatriz (var Mapa:arreglo; Filas,Columnas:integer);  {Genera una matriz tipo string completamente vacia, preparada para llenarse}
var
 i,j:integer;
BEGIN
 For i:=1 to Filas do begin
 {} For j:=1 to Columnas do begin
 {} {} Mapa[i,j]:='';
 {} end;
 end;
END;
{-----------------------------------------------}
Procedure escribir(A:string;var ContadorDeLineas,Filas,Columnas,NumEstrellas:integer; var vero:boolean);
  {Procedure encargado de revisar la linea String, pasarla a dato tipo integer y corroborar que los datos especificos cumplan las condiciones minimas}
var
 aux,Numero1,Numero2:string;
 i,cont,error,x,y,suma,SumaAux,NumDestructores:integer;
Begin
  ContadorDeLineas:=ContadorDeLineas+1; {Cada vez que se llame el proceso escribir el contador de lines aumenta en 1}
  A:=A+' '; aux:=''; cont:=0;

  For i:=1 to Length(A) do begin          {Esta seccion lee toda la linea y guarda 2 datos}
  {} if (a[i]<>' ')then aux:=aux+a[i]
  {} else begin                            {Cada vez que encuentre un espacio, agarra y guarda un dato distinto}
  {} {}cont:=cont+1;
  {} {}if (cont=1) then begin numero1:=aux; aux:=''; end;
  {} {}if (cont=2)then  begin numero2:=aux; aux:=''; end;
  {} end;
  end;

 val(Numero1,x,error);   val(Numero2,y,error); {Se guardan los valores strings anteriores en su valor numerico integer}


 {Toda esta seccion se encarga de guardar y crear la matriz y su respectivo relleno,consta de 7 partes}
 {''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''}

{1}{MATRIZ}
{}{----La primera linea del archivo leera el tamaño de la matriz, tambien se verificara que sea mayor a 1x1 y menor a 30x30}
{}
{}   If (ContadorDeLineas=1) then begin
{}   {} Filas:=x; Columnas:=y;
{}   {} if (x>30) or (x<1) or (y>30) or (y<1) then begin
{}   {} {} vero:=false; writeln('La matriz debe ser mayor a [1x1] y menor o igual a [30x30]');
{}   {} {} writeln('El programa finalizara, modifique el .txt');  {Si no cumple con los requisitos, se lanzara un mensaje de error, y un valor booleano negara la entrada de mas datos}
{}   {} end
{}   {} else begin GenerarMatriz(Mapa,Filas,Columnas); writeln('Filas: ',Filas,'. Columnas: ',Columnas); end;
{}   end;
{---}

{2}{NAVE}
{}{----La segunda linea del archivo leera la posicion de la nave, verificara que la posicion de la nave este dentro del tamaño de la matriz.}
{}
{}  If (contadorDeLineas=2) and (vero=true) then begin
{}   {} if (x>filas) or (x<1) or (y>columnas) or (y<1) then begin
{}   {} {} vero:=false; writeln('La posicion de la nave debe ser mayor [1x1] y menor al tamaño de la matriz');
{}   {} {} writeln('El programa finalizará, modifique el .txt');
{}   {} end
{}   {} else begin Mapa[x,y]:='H'; writeln('Posicion de la nave: X: ',x,'. Y: ',y) end;
{}  end;
{}
{---}

{3}{PLANETA}
{} {----La Tercera linea del archivo leera la posicion del planeta, verificara que la posicion del planeta este Dentro del tamaño del archivo.}
{}
{} If (ContadorDeLineas=3) and (vero=true) then begin
{}  {} if (x>filas) or (x<1) or (y>filas) or (y<1) then begin                                                     {-      Logicamente      -}
{}  {} {} vero:=false; writeln('La posicion del planeta debe ser mayor [1x1] y menor al tamaño de la matriz');    {- correcto mas no probada}
{}  {} {} writeln('El programa finalizará, modifique el .txt');                                                   {-                       -}
{}  {} end
{}  {} else begin Mapa[x,y]:='T'; writeln('Posicion del planeta: X: ',x,'. Y: ',y)end;
{}  end;
{---}

{4-5+} {ESTRELLAS}
{} {--------La cuarta linea del archivo leera la cantidad de estrellas, solo se usara la X de esta linea, sin importar si hay o no un valor y}
{} {}
{} {} If (ContadorDeLineas=4) and (vero=true) then begin
{} {}  {}  if (x>(filas*columnas)) or (x<0) then begin
{} {}  {} {} vero:=false; writeln('La cantidad de estrellas debe ser y menor al tamano de la matriz,y mayor o igual a 0');
{} {}  {} {} writeln('El programa finalizara, modifique el .txt');
{} {}  {} end
{} {}  {} else begin NumEstrellas:=x; suma:=4+x+1; writeln('Cantidad de estrellas: ',NumEstrellas)  end;
{} {}  end;
{} {---}
{}
{} {-----La quinta linea en adelante leera la posicion de cada estrella}
{}
{} If (ContadorDelineas<suma)and (ContadorDelineas>4) and (vero=true) then begin
{}  {} if (x>filas) or (x<1) or (y>columnas) or (y<1) then begin
{}  {} {} vero:=false; writeln('La posicion de la estrella en el .txt (Ubicado en la fila: ',ContadorDeLineas,') debe de estar entre [1x1] y menor al tamaño de la matriz');
{}  {} {} writeln('El programa finalizará, modifique el .txt');
{}  {} end
{}  {} else begin Mapa[x,y]:='E'; writeln('Posicion de estrella: ',x,' ',y);end;
{}  end;
{---}

{6+,7+}{DESTRUCTORES}
{} {-------La 6ta parte leera la linea con la cantidad de destructores}
{} {}
{} {}If (ContadorDeLineas=suma)and (vero=true) then begin {Numero De Destructores}
{} {} {}  if (x>(filas*columnas)) or (x<0) then begin
{} {} {} {} vero:=false; writeln('La cantidad de destructores debe ser y menor al tamaño de la matriz,y mayor o igual a 0');
{} {} {} {} writeln('El programa finalizará, modifique el .txt');
{} {} {} end
{} {} {} else begin NumDestructores:=x; sumaAux:=suma+x+1; writeln('Destructores: ',Numdestructores); end;
{} {} end;
{} {---}
{}
{} {La septima y ultima parte evaluara la posicion de cada destructor}
{}
{} If (ContadorDelineas<sumaAux) and (ContadorDeLineas>suma)and (vero=true) then begin
{}  {} if (x>filas) or (x<1) or (y>columnas) or (y<1) then begin
{}  {} {} vero:=false; writeln('La posicion del  destructor en el .txt (Ubicado en la fila: ',ContadorDeLineas,') debe de estar entre [1x1] y menor al tamaño de la matriz');
{}  {} {} writeln('El programa finalizará, modifique el .txt');
{}  {} end
{}  {} else begin Mapa[x,y]:='D'; writeln('Posicion del destructor x:',x,' y: ',y); end;
{}  end;
{---}

end;
{----------------------------------------------------------------------}
Procedure LeerFichero(var ContadorDeLineas:integer);
Var
 Fichero:text;
 A,linea:string;
BEGIN
{}   assign(fichero,'C:\Users\Victor\Documents\UCAB\Program Lía\est.txt');
{}   reset(fichero);
{}   while not eof(fichero) do begin     {Mientras no termine el archivo leer cada linea}
{}    {}readln(fichero,linea);
{}    {}A:=linea; Escribir(A,ContadorDeLineas,Filas,columnas,NumEstrellas,vero); {La linea se guarda en una variable A, y se llama al proceso Escribir}
{}    end;
{}     close(fichero);readkey;
END;
{================================================================================}
Begin
Introduccion; Clrscr;
Preparacion;
 vero:=true;
ContadorDelineas:=0;  {Contador con el que se guardara la cantidad de lineas del <<.txt>>, servira para tener un control a la hora de hacer la matriz}
LeerFichero(ContadorDeLineas); {Todos estos procesos seran SOLO y Exlusivamente para cargar el .txt en el juego, y verificar el mismo}
END.